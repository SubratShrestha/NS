import asyncio
import threading
from bleak import discover, BleakClient, BleakScanner
from bleak.exc import BleakDotNetTaskError, BleakError
import pprint

svcs_dict = {
    'CHANNEL_NUM_CHAR': [0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01],
    'MAX_FREQ_CHAR': [0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01],
    'OTA_SUPPORT_CHAR': [0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01],
    'BATTRY_SERVICE': [0x180F],
    'BATTRY_LEVEL_CHAR':[0x2A19],
    'STIMULATION_COMMAND_SERVICE': [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02],
    'STIM_AMP_READ_CHAR': [0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02],
    'STIM_AMP_WRITE_CHAR':[0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02],
    'PHASE_ONE_READ_CHAR':[0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02],
    'PHASE_ONE_WRITE_CHAR':[0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02],
    'INTER_PHASE_GAP_READ_CHAR':[0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02],
    'INTER_PHASE_GAP_WRITE_CHAR':[0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02],
    'PHASE_TWO_READ_CHAR':[0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02],
    'PHASE_TWO_WRITE_CHAR':[0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02],
    'INTER_STIM_DELAY_READ_CHAR':[0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02],
    'INTER_STIM_DELAY_WRITE_CHAR':[0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02],
    'STIMULATION_DURATION_READ_CHAR':[0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02],
    'STIMULATION_DURATION_WRITE_CHAR':[0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02],
    'PULSE_PERIOD_READ_CHAR':[0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02],
    'PULSE_PERIOD_WRITE_CHAR':[0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02]
}

# for k,v in svcs_dict.items():
#     print(k, end=':')
#     for i in v:
#         print(hex(int(i, 16)))

# def print_hex(text):
#     l = [text.replace('-', '')[z:z + 2] for z in range(0, len(text.replace('-', '')), 2)]
#     match = []
#     for hx in l:
#         h = hex(int(hx, 16))
#         print(h, end=',')
#         match.append(h)
#     print(match)



async def connect(address, loop):
    async with BleakClient(address, loop=loop) as client:
        print("Try Connecting")
        try:
            await client.connect()
        except Exception as e:
            print(e)
        except BleakDotNetTaskError as e:
            print(e)
        except BleakError as e:
            print(e)
        finally:
            if await client.is_connected():
                print("CONNECTED")
                services = await client.get_services()
                services = vars(services)
                print(services)
                for k,v in services.items():
                    if 'services' in k:
                        print("=================== Services ==================")
                        for sk,sv in v.items():
                            print(sv)
                        print("\n===============================================\n\n")
                    if 'characteristics' in k:
                        print("=================== characteristics ==================")
                        for sk,sv in v.items():
                            print(sv)
                        print("===============================================\n\n")

                    if 'descript' in k:
                        print("=================== descript ==================")
                        for sk,sv in v.items():
                            print(sv)
                        print("===============================================\n\n")
                return client

async def ble_discover(loop, time):
    task1 = loop.create_task(discover(time))
    await asyncio.wait([task1])
    return task1

async def ble_print_connection(loop,d):
    task1 = loop.create_task(connect(d, loop))
    await asyncio.wait([task1])
    return task1

def BluetoothDiscoverLoop():
    loop = asyncio.get_event_loop()
    client = loop.run_until_complete(connect('C8:2B:96:A2:85:F6', loop))
    # print("RETURNED")
    # if client is not None:
    #     print("CLIENT OBJ RETURNED")

if __name__ == '__main__':
    BluetoothDiscoverLoop()